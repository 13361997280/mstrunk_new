<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.qianwang.mapper.user.LightUserChannelActionStatDayMapper" >
  <resultMap id="BaseResultMap" type="com.qianwang.dao.domain.user.LightUserChannelActionStatDay" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Nov 25 14:11:51 CST 2014.
    -->
    <id column="register_issue" property="registerIssue" jdbcType="INTEGER" />
    <id column="stat_date" property="statDate" jdbcType="DATE" />
    <result column="spread_type" property="spreadType" jdbcType="INTEGER" />
    <result column="register_area" property="registerArea" jdbcType="INTEGER" />
    <result column="register_channel" property="registerChannel" jdbcType="INTEGER" />
    <result column="user_count" property="userCount" jdbcType="INTEGER" />
    <result column="sign_members" property="signMembers" jdbcType="INTEGER" />
    <result column="recharge_members" property="rechargeMembers" jdbcType="INTEGER" />
    <result column="transfer_members" property="transferMembers" jdbcType="INTEGER" />
    <result column="get_task_members" property="getTaskMembers" jdbcType="INTEGER" />
    <result column="verified_members" property="verifiedMembers" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Nov 25 14:11:51 CST 2014.
    -->
    register_issue, stat_date, spread_type, register_area, register_channel, user_count, 
    sign_members, recharge_members, transfer_members, get_task_members, verified_members
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="com.qianwang.dao.domain.user.LightUserChannelActionStatDayKey" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Nov 25 14:11:51 CST 2014.
    -->
    select 
    <include refid="Base_Column_List" />
    from light_user_channel_action_stat_day
    where register_issue = #{registerIssue,jdbcType=INTEGER}
      and stat_date = #{statDate,jdbcType=DATE}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.qianwang.dao.domain.user.LightUserChannelActionStatDayKey" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Nov 25 14:11:51 CST 2014.
    -->
    delete from light_user_channel_action_stat_day
    where register_issue = #{registerIssue,jdbcType=INTEGER}
      and stat_date = #{statDate,jdbcType=DATE}
  </delete>
  <insert id="insert" parameterType="com.qianwang.dao.domain.user.LightUserChannelActionStatDay" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Nov 25 14:11:51 CST 2014.
    -->
    insert into light_user_channel_action_stat_day (register_issue, stat_date, spread_type, 
      register_area, register_channel, user_count, 
      sign_members, recharge_members, transfer_members, 
      get_task_members, verified_members)
    values (#{registerIssue,jdbcType=INTEGER}, #{statDate,jdbcType=DATE}, #{spreadType,jdbcType=INTEGER}, 
      #{registerArea,jdbcType=INTEGER}, #{registerChannel,jdbcType=INTEGER}, #{userCount,jdbcType=INTEGER}, 
      #{signMembers,jdbcType=INTEGER}, #{rechargeMembers,jdbcType=INTEGER}, #{transferMembers,jdbcType=INTEGER}, 
      #{getTaskMembers,jdbcType=INTEGER}, #{verifiedMembers,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.qianwang.dao.domain.user.LightUserChannelActionStatDay" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Nov 25 14:11:51 CST 2014.
    -->
    insert into light_user_channel_action_stat_day
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="registerIssue != null" >
        register_issue,
      </if>
      <if test="statDate != null" >
        stat_date,
      </if>
      <if test="spreadType != null" >
        spread_type,
      </if>
      <if test="registerArea != null" >
        register_area,
      </if>
      <if test="registerChannel != null" >
        register_channel,
      </if>
      <if test="userCount != null" >
        user_count,
      </if>
      <if test="signMembers != null" >
        sign_members,
      </if>
      <if test="rechargeMembers != null" >
        recharge_members,
      </if>
      <if test="transferMembers != null" >
        transfer_members,
      </if>
      <if test="getTaskMembers != null" >
        get_task_members,
      </if>
      <if test="verifiedMembers != null" >
        verified_members,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="registerIssue != null" >
        #{registerIssue,jdbcType=INTEGER},
      </if>
      <if test="statDate != null" >
        #{statDate,jdbcType=DATE},
      </if>
      <if test="spreadType != null" >
        #{spreadType,jdbcType=INTEGER},
      </if>
      <if test="registerArea != null" >
        #{registerArea,jdbcType=INTEGER},
      </if>
      <if test="registerChannel != null" >
        #{registerChannel,jdbcType=INTEGER},
      </if>
      <if test="userCount != null" >
        #{userCount,jdbcType=INTEGER},
      </if>
      <if test="signMembers != null" >
        #{signMembers,jdbcType=INTEGER},
      </if>
      <if test="rechargeMembers != null" >
        #{rechargeMembers,jdbcType=INTEGER},
      </if>
      <if test="transferMembers != null" >
        #{transferMembers,jdbcType=INTEGER},
      </if>
      <if test="getTaskMembers != null" >
        #{getTaskMembers,jdbcType=INTEGER},
      </if>
      <if test="verifiedMembers != null" >
        #{verifiedMembers,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.qianwang.dao.domain.user.LightUserChannelActionStatDay" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Nov 25 14:11:51 CST 2014.
    -->
    update light_user_channel_action_stat_day
    <set >
      <if test="spreadType != null" >
        spread_type = #{spreadType,jdbcType=INTEGER},
      </if>
      <if test="registerArea != null" >
        register_area = #{registerArea,jdbcType=INTEGER},
      </if>
      <if test="registerChannel != null" >
        register_channel = #{registerChannel,jdbcType=INTEGER},
      </if>
      <if test="userCount != null" >
        user_count = #{userCount,jdbcType=INTEGER},
      </if>
      <if test="signMembers != null" >
        sign_members = #{signMembers,jdbcType=INTEGER},
      </if>
      <if test="rechargeMembers != null" >
        recharge_members = #{rechargeMembers,jdbcType=INTEGER},
      </if>
      <if test="transferMembers != null" >
        transfer_members = #{transferMembers,jdbcType=INTEGER},
      </if>
      <if test="getTaskMembers != null" >
        get_task_members = #{getTaskMembers,jdbcType=INTEGER},
      </if>
      <if test="verifiedMembers != null" >
        verified_members = #{verifiedMembers,jdbcType=INTEGER},
      </if>
    </set>
    where register_issue = #{registerIssue,jdbcType=INTEGER}
      and stat_date = #{statDate,jdbcType=DATE}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.qianwang.dao.domain.user.LightUserChannelActionStatDay" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Nov 25 14:11:51 CST 2014.
    -->
    update light_user_channel_action_stat_day
    set spread_type = #{spreadType,jdbcType=INTEGER},
      register_area = #{registerArea,jdbcType=INTEGER},
      register_channel = #{registerChannel,jdbcType=INTEGER},
      user_count = #{userCount,jdbcType=INTEGER},
      sign_members = #{signMembers,jdbcType=INTEGER},
      recharge_members = #{rechargeMembers,jdbcType=INTEGER},
      transfer_members = #{transferMembers,jdbcType=INTEGER},
      get_task_members = #{getTaskMembers,jdbcType=INTEGER},
      verified_members = #{verifiedMembers,jdbcType=INTEGER}
    where register_issue = #{registerIssue,jdbcType=INTEGER}
      and stat_date = #{statDate,jdbcType=DATE}
  </update>
  
  <select id="getUserSource" resultType="java.util.Map" parameterType="java.lang.Integer">
    select date(stat_time) statDate,
    sum(user_num) userCount,
    SUM(sign_num) signMembers,
    SUM(recharge_num) rechargeMembers,
    SUM(transfer_num) transferMembers,
    SUM(get_task_num) getTaskMembers,
    IFNULL(ROUND(SUM(get_task_num)/SUM(user_num),4),0) getTaskRatio,
    SUM(verified_num) verifiedMembers,
    SUM(recharge) recharge,
    SUM(transfer) transfer
    from dw.light_user_channel_stat_real
    where stat_time >= #{startDate} and stat_time <![CDATA[ < ]]> #{endDate} + INTERVAL 1 day
    <if test="registerChannel != '-1'" >
      AND first_channel = #{registerChannel}
    </if>
    <if test="spreadType != '-1'" >
      AND second_channel = #{spreadType}
    </if>
    <if test="tuijian != -1" >
      AND p_type = #{tuijian}
    </if>
    GROUP BY statDate;
  </select>
  
<select id="getUserSourceHour" resultType="java.util.Map" parameterType="java.lang.Integer">
    select stat_time statDate,
    sum(user_num) userCount,
    SUM(sign_num) signMembers,
    SUM(recharge_num) rechargeMembers,
    SUM(transfer_num) transferMembers,
    SUM(get_task_num) getTaskMembers,
    IFNULL(ROUND(SUM(get_task_num)/SUM(user_num),4),0) getTaskRatio,
    SUM(verified_num) verifiedMembers,
    SUM(recharge) recharge,
    SUM(transfer) transfer
    from dw.light_user_channel_stat_real
    where stat_time >= #{startDate} and stat_time <![CDATA[ < ]]> #{endDate} + INTERVAL 1 day
    <if test="registerChannel != '-1'" >
      AND first_channel = #{registerChannel}
    </if>
    <if test="spreadType != '-1'" >
      AND second_channel = #{spreadType}
    </if>
    <if test="tuijian != -1" >
      AND p_type = #{tuijian}
    </if>
    GROUP BY statDate;
</select>

<select id="getUserSourceRec" resultType="java.util.Map" parameterType="java.lang.Integer">
    SELECT date(stat_time) statDate,
    SUM(IF(p_type = 1,user_num,0)) recUserCount,
    SUM(IF(p_type = 0,user_num,0)) unRecUserCount
    FROM light_user_channel_stat_real
    WHERE stat_time >= #{startDate} AND stat_time <![CDATA[ < ]]> #{endDate} + interval 1 day
    GROUP BY statDate
</select>
  
<select id="getUserSourceRecHour" resultType="java.util.Map" parameterType="java.lang.Integer">
    SELECT stat_time statDate,
    SUM(IF(p_type = 1,user_num,0)) recUserCount,
    SUM(IF(p_type = 0,user_num,0)) unRecUserCount
    FROM light_user_channel_stat_real
    WHERE stat_time >= #{startDate} AND stat_time <![CDATA[ < ]]> #{startDate} + interval 1 day
    GROUP BY statDate
</select>
  
  <select id="getUserSourceGroup" resultType="java.util.Map" parameterType="java.lang.Integer">
    SELECT A.target, A.targetName,
    B.userCount,B.signMembers,B.rechargeMembers,B.transferMembers,B.getTaskMembers,B.verifiedMembers,
    B.recharge,B.transfer
    FROM
    (<if test="registerChannel == '-1'" >
    select first_channel_code target,first_channel_name targetName
    from usercenter.uc_first_chanel
  </if>
    <if test="registerChannel != '-1'" >
      select second_channel_code target,second_channel_name targetName
      from usercenter.uc_second_chanel
    </if>) A,
    (SELECT
    <if test="registerChannel == '-1'" >
      first_channel target,
    </if>
    <if test="registerChannel != '-1'">
      second_channel target,
    </if>
    sum(user_num) userCount,
    SUM(sign_num) signMembers,
    SUM(recharge_num) rechargeMembers,
    SUM(transfer_num) transferMembers,
    SUM(get_task_num) getTaskMembers,
    SUM(verified_num) verifiedMembers,
    SUM(recharge) recharge,
    SUM(transfer) transfer
    FROM dw.light_user_channel_stat_real
    where stat_time >= #{startDate} and stat_time <![CDATA[ < ]]> #{endDate} + INTERVAL 1 day
    <if test="registerChannel != '-1'" >
      AND first_channel = #{registerChannel}
    </if>
    <if test="spreadType != '-1'" >
      AND second_channel = #{spreadType}
    </if>
    <if test="tuijian != -1" >
      AND p_type = #{tuijian}
    </if>
    GROUP BY
    <if test="registerChannel == '-1'" >
      first_channel
    </if>
    <if test="registerChannel != '-1'" >
      second_channel
    </if>) B
    where A.target = B.target
  </select>
  <select id="getUserSourceHourGroup" resultType="java.util.Map" parameterType="java.lang.Integer">
    SELECT A.target, A.targetName,
    B.userCount,B.signMembers,B.rechargeMembers,B.transferMembers,B.getTaskMembers,B.verifiedMembers,
    B.recharge,B.transfer
    FROM
    (<if test="registerChannel == '-1'" >
    select first_channel_code target,first_channel_name targetName
    from usercenter.uc_first_chanel
  </if>
    <if test="registerChannel != '-1'" >
      select second_channel_code target,second_channel_name targetName
      from usercenter.uc_second_chanel
    </if>) A,
    (SELECT
    <if test="registerChannel == '-1'" >
      first_channel target,
    </if>
    <if test="registerChannel != '-1'">
      second_channel target,
    </if>
    sum(user_num) userCount,
    SUM(sign_num) signMembers,
    SUM(recharge_num) rechargeMembers,
    SUM(transfer_num) transferMembers,
    SUM(get_task_num) getTaskMembers,
    SUM(verified_num) verifiedMembers,
    SUM(recharge) recharge,
    SUM(transfer) transfer
    FROM dw.light_user_channel_stat_real
    where stat_time >= #{startDate} and stat_time <![CDATA[ < ]]> #{endDate} + INTERVAL 1 day
    <if test="registerChannel != '-1'" >
      AND first_channel = #{registerChannel}
    </if>
    <if test="spreadType != '-1'" >
      AND second_channel = #{spreadType}
    </if>
    <if test="tuijian != -1" >
      AND p_type = #{tuijian}
    </if>
    GROUP BY
    <if test="registerChannel == '-1'" >
      first_channel
    </if>
    <if test="registerChannel != '-1'" >
      second_channel
    </if>) B
    where A.target = B.target
  </select>
  
  <select id="getSignInfo" resultType="java.util.Map" parameterType="java.lang.Integer">
  	SELECT A.stat_date statDate, sign_user_num signUserNum, amount signAmount
	FROM
	(SELECT stat_date, SUM(sign_user_num) sign_user_num
	FROM heavy_sign_stat_day
	WHERE stat_date BETWEEN #{startDate} AND #{endDate}
	GROUP BY stat_date) A,
	(SELECT stat_date, SUM(amount) amount
	FROM light_reward_fee_stat_day
	WHERE rp_class = 1400002
	AND stat_date BETWEEN #{startDate} AND #{endDate}
	GROUP BY stat_date) B
	WHERE A.stat_date = B.stat_date
  </select>

  <select id="getClassifySignInfo" resultType="java.util.Map" parameterType="java.lang.Integer">
  </select>

  <select id="getSignHourInfo" resultType="java.util.Map" parameterType="java.lang.Integer">
	SELECT stat_time statDate, sign_user_num signUserNum, sign_amount signAmount
	FROM light_sign_record_stat_real
	WHERE DATE(stat_time) = #{startDate}
  </select>

  <select id="getClassifySignHourInfo" resultType="java.util.Map" parameterType="java.lang.Integer">
    select * from `light_sign_dis_stat_real`
    where stat_time >= #{startDate} and stat_time <![CDATA[ < ]]> #{startDate} + interval 1 day
  </select>

  <select id="getUserRechargeDist" resultType="java.util.Map" parameterType="java.lang.Integer">
	SELECT
	stat_date,     
	user_num30,    
	user_num200,   
	user_num1000,  
	user_num10000, 
	user_num50000, 
	user_num_max,  
	amount30,      
	amount200,     
	amount1000,    
	amount10000,   
	amount50000,   
	amount_max
	FROM heavy_user_recharge_distribute_stat_day
	WHERE stat_date BETWEEN #{startDate} AND #{endDate}
  </select>

  <select id="getTodayRegisterInfo" resultType="java.util.Map" parameterType="java.util.Map">
    SELECT stat_time AS statDate , SUM(user_count) AS userCount
      FROM `light_user_channel_action_stat_hour`
      WHERE stat_date=#{chooseTime} GROUP BY stat_time
  </select>

  <select id="getLastSixWeekRegisterInfo" resultType="java.util.Map" parameterType="java.util.Map">
    SELECT
    mm.d AS statTime,
    SQRT((mm1.user_count*mm1.user_count + mm2.user_count*mm2.user_count + mm3.user_count*mm3.user_count + mm4.user_count*mm4.user_count + mm5.user_count*mm5.user_count + mm6.user_count*mm6.user_count)/6) userCountOfLastSixDay
    FROM
    (SELECT SUM(user_count) user_count ,d FROM
    (
    SELECT
    user_count, (stat_time - INTERVAL MINUTE(stat_time)%10 MINUTE) d FROM `light_user_channel_action_stat_hour`
    WHERE stat_time >= #{chooseTime} AND stat_time  <![CDATA[ < ]]>  #{chooseTime} + INTERVAL 1 DAY
    ) m
    GROUP BY d) mm,
    (SELECT SUM(user_count) user_count,(d + INTERVAL 1 WEEK) d FROM
    (
    SELECT
    user_count, (stat_time - INTERVAL MINUTE(stat_time)%10 MINUTE) d FROM `light_user_channel_action_stat_hour`
    WHERE stat_time >= #{chooseTime} - INTERVAL 1 WEEK AND stat_time  <![CDATA[ < ]]>  #{chooseTime} + INTERVAL 1 DAY - INTERVAL 1 WEEK
    ) m1
    GROUP BY d) mm1,
    (SELECT SUM(user_count) user_count,(d + INTERVAL 2 WEEK) d FROM
    (
    SELECT
    user_count, (stat_time - INTERVAL MINUTE(stat_time)%10 MINUTE) d FROM `light_user_channel_action_stat_hour`
    WHERE stat_time >= #{chooseTime} - INTERVAL 2 WEEK AND stat_time  <![CDATA[ < ]]>  #{chooseTime} + INTERVAL 1 DAY - INTERVAL 2 WEEK
    ) m2
    GROUP BY d) mm2,
    (SELECT SUM(user_count) user_count,(d + INTERVAL 3 WEEK) d FROM
    (
    SELECT
    user_count, (stat_time - INTERVAL MINUTE(stat_time)%10 MINUTE) d FROM `light_user_channel_action_stat_hour`
    WHERE stat_time >= #{chooseTime} - INTERVAL 3 WEEK AND stat_time  <![CDATA[ < ]]>  #{chooseTime} + INTERVAL 1 DAY - INTERVAL 3 WEEK
    ) m3
    GROUP BY d) mm3,
    (SELECT SUM(user_count) user_count,(d + INTERVAL 4 WEEK) d FROM
    (
    SELECT
    user_count, (stat_time - INTERVAL MINUTE(stat_time)%10 MINUTE) d FROM `light_user_channel_action_stat_hour`
    WHERE stat_time >= #{chooseTime} - INTERVAL 4 WEEK AND stat_time  <![CDATA[ < ]]>  #{chooseTime} + INTERVAL 1 DAY - INTERVAL 4 WEEK
    ) m4
    GROUP BY d) mm4,
    (SELECT SUM(user_count) user_count,(d + INTERVAL 5 WEEK) d FROM
    (
    SELECT
    user_count, (stat_time - INTERVAL MINUTE(stat_time)%10 MINUTE) d FROM `light_user_channel_action_stat_hour`
    WHERE stat_time >= #{chooseTime} - INTERVAL 5 WEEK AND stat_time  <![CDATA[ < ]]>  #{chooseTime} + INTERVAL 1 DAY - INTERVAL 5 WEEK
    ) m5
    GROUP BY d) mm5,
    (SELECT SUM(user_count) user_count,(d + INTERVAL 6 WEEK) d FROM
    (
    SELECT
    user_count, (stat_time - INTERVAL MINUTE(stat_time)%10 MINUTE) d FROM `light_user_channel_action_stat_hour`
    WHERE stat_time >= #{chooseTime} - INTERVAL 6 WEEK AND stat_time  <![CDATA[ < ]]>  #{chooseTime} + INTERVAL 1 DAY - INTERVAL 6 WEEK
    ) m6
    GROUP BY d) mm6
    WHERE mm.d = mm1.d
    AND mm.d = mm2.d
    AND mm.d = mm3.d
    AND mm.d = mm4.d
    AND mm.d = mm5.d
    AND mm.d = mm6.d
  </select>
  
  <select id="depositAlertCnt" resultType="java.lang.Integer" parameterType="java.util.Map">
  	SELECT COUNT(DISTINCT((stat_time - INTERVAL MINUTE(stat_time)%10 MINUTE))) FROM `light_user_channel_action_stat_hour`
    WHERE stat_time >= #{chooseTime} AND stat_time  <![CDATA[ < ]]>  #{chooseTime} + INTERVAL 1 DAY
  </select>
  
  
  <select id="getAllUserTaskActivityCustom" resultType="java.util.Map" parameterType="java.util.Date">
  	SELECT stat_date statDate,
	COUNT(user_id) userNum,
	SUM(IF(get_task_count>0,1,0)) getTaskUserNum,
	SUM(IF(do_task_count>0,1,0)) doTaskUserNum,
	IFNULL(ROUND(SUM(IF(get_task_count>0,1,0))/COUNT(user_id),4), 0) getTaskRatio,
	IFNULL(ROUND(SUM(IF(do_task_count>0,1,0))/COUNT(user_id),4), 0) doTaskRatio
    FROM light_user_general_stat_day
    WHERE stat_date BETWEEN #{startDate} AND #{endDate} AND total_assets BETWEEN #{startAssets}*100 AND #{endAssets}*100
    GROUP BY stat_date
  </select>
  
  <select id="getAllUserTaskActivity" resultType="java.util.Map" parameterType="java.util.Date">
  	SELECT stat_date statDate,
	user_num userNum,
	get_task_user_num getTaskUserNum,
	do_task_user_num doTaskUserNum,
	IFNULL(ROUND((get_task_user_num / user_num),4), 0) getTaskRatio,
	IFNULL(ROUND((do_task_user_num / user_num),4), 0) doTaskRatio
    FROM light_user_task_activity_stat_day
    WHERE stat_date BETWEEN #{startDate} AND #{endDate} 
    AND type = #{type}
  </select>
  
  <select id="getUserTaskActivityTblInfo" resultType="java.util.Map" parameterType="java.util.Date">
  	SELECT A.statDate,A.userCount,A.getTaskMembers,A.getTaskRatio,C.reward_receive_ratio,
  	B1.userNum userNum_1,B1.getTaskUserNum getTaskUserNum_1,B1.doTaskUserNum doTaskUserNum_1,B1.getTaskRatio getTaskRatio_1,B1.doTaskRatio doTaskRatio_1,
  	B2.userNum userNum_2,B2.getTaskUserNum getTaskUserNum_2,B2.doTaskUserNum doTaskUserNum_2,B2.getTaskRatio getTaskRatio_2,B2.doTaskRatio doTaskRatio_2,
  	B3.userNum userNum_3,B3.getTaskUserNum getTaskUserNum_3,B3.doTaskUserNum doTaskUserNum_3,B3.getTaskRatio getTaskRatio_3,B3.doTaskRatio doTaskRatio_3,
  	B4.userNum userNum_4,B4.getTaskUserNum getTaskUserNum_4,B4.doTaskUserNum doTaskUserNum_4,B4.getTaskRatio getTaskRatio_4,B4.doTaskRatio doTaskRatio_4,
  	B5.userNum userNum_5,B5.getTaskUserNum getTaskUserNum_5,B5.doTaskUserNum doTaskUserNum_5,B5.getTaskRatio getTaskRatio_5,B5.doTaskRatio doTaskRatio_5,
  	B6.userNum userNum_6,B6.getTaskUserNum getTaskUserNum_6,B6.doTaskUserNum doTaskUserNum_6,B6.getTaskRatio getTaskRatio_6,B6.doTaskRatio doTaskRatio_6,
  	B7.userNum userNum_7,B7.getTaskUserNum getTaskUserNum_7,B7.doTaskUserNum doTaskUserNum_7,B7.getTaskRatio getTaskRatio_7,B7.doTaskRatio doTaskRatio_7,
  	B8.userNum userNum_8,B8.getTaskUserNum getTaskUserNum_8,B8.doTaskUserNum doTaskUserNum_8,B8.getTaskRatio getTaskRatio_8,B8.doTaskRatio doTaskRatio_8
  	FROM
  	(SELECT stat_date statDate, 
  		   SUM(user_count) userCount, 
  		   SUM(sign_members) signMembers, 
  		   SUM(recharge_members) rechargeMembers, 
  		   SUM(transfer_members) transferMembers, 
  		   SUM(get_task_members) getTaskMembers, 
  		   IFNULL(ROUND(SUM(get_task_members)/SUM(user_count),4),0) getTaskRatio,
  		   SUM(verified_members) verifiedMembers,
  		   SUM(recharge) recharge,
  		   SUM(transfer) transfer
	FROM light_user_channel_action_stat_day
	WHERE stat_date BETWEEN #{startDate} AND #{endDate}
    GROUP BY stat_date) A,
    <!--
    (SELECT stat_date statDate,
	IFNULL(ROUND(receive_margins/(a_reward_margins+m_reward_margins),4),0) reward_receive_ratio
	FROM dw.heavy_task_acc_recent_day
	WHERE stat_date BETWEEN #{startDate} AND #{endDate}) C,
	-->
    (SELECT AA.stat_date statDate,
    IFNULL(ROUND((AA.receive_margins+IFNULL(BB.get_margins,0))/(AA.a_reward_margins+AA.m_reward_margins+IFNULL(BB.settle_margins,0)),4),0) reward_receive_ratio
    FROM dw.heavy_task_acc_recent_day AA LEFT JOIN dw.heavy_share_task_stat_day BB ON AA.stat_date = BB.stat_date
    WHERE AA.stat_date BETWEEN #{startDate} AND #{endDate}) C,
  	(SELECT stat_date statDate,
	user_num userNum,
	get_task_user_num getTaskUserNum,
	do_task_user_num doTaskUserNum,
	IFNULL(ROUND((get_task_user_num / user_num),4), 0) getTaskRatio,
	IFNULL(ROUND((do_task_user_num / user_num),4), 0) doTaskRatio
    FROM light_user_task_activity_stat_day
    WHERE stat_date BETWEEN #{startDate} AND #{endDate} 
    AND type = 1) B1,
  	(SELECT stat_date statDate,
	user_num userNum,
	get_task_user_num getTaskUserNum,
	do_task_user_num doTaskUserNum,
	IFNULL(ROUND((get_task_user_num / user_num),4), 0) getTaskRatio,
	IFNULL(ROUND((do_task_user_num / user_num),4), 0) doTaskRatio
    FROM light_user_task_activity_stat_day
    WHERE stat_date BETWEEN #{startDate} AND #{endDate} 
    AND type = 2) B2,
  	(SELECT stat_date statDate,
	user_num userNum,
	get_task_user_num getTaskUserNum,
	do_task_user_num doTaskUserNum,
	IFNULL(ROUND((get_task_user_num / user_num),4), 0) getTaskRatio,
	IFNULL(ROUND((do_task_user_num / user_num),4), 0) doTaskRatio
    FROM light_user_task_activity_stat_day
    WHERE stat_date BETWEEN #{startDate} AND #{endDate} 
    AND type = 3) B3,
  	(SELECT stat_date statDate,
	user_num userNum,
	get_task_user_num getTaskUserNum,
	do_task_user_num doTaskUserNum,
	IFNULL(ROUND((get_task_user_num / user_num),4), 0) getTaskRatio,
	IFNULL(ROUND((do_task_user_num / user_num),4), 0) doTaskRatio
    FROM light_user_task_activity_stat_day
    WHERE stat_date BETWEEN #{startDate} AND #{endDate} 
    AND type = 4) B4,
  	(SELECT stat_date statDate,
	user_num userNum,
	get_task_user_num getTaskUserNum,
	do_task_user_num doTaskUserNum,
	IFNULL(ROUND((get_task_user_num / user_num),4), 0) getTaskRatio,
	IFNULL(ROUND((do_task_user_num / user_num),4), 0) doTaskRatio
    FROM light_user_task_activity_stat_day
    WHERE stat_date BETWEEN #{startDate} AND #{endDate} 
    AND type = 5) B5,
  	(SELECT stat_date statDate,
	user_num userNum,
	get_task_user_num getTaskUserNum,
	do_task_user_num doTaskUserNum,
	IFNULL(ROUND((get_task_user_num / user_num),4), 0) getTaskRatio,
	IFNULL(ROUND((do_task_user_num / user_num),4), 0) doTaskRatio
    FROM light_user_task_activity_stat_day
    WHERE stat_date BETWEEN #{startDate} AND #{endDate} 
    AND type = 6) B6,
  	(SELECT stat_date statDate,
	user_num userNum,
	get_task_user_num getTaskUserNum,
	do_task_user_num doTaskUserNum,
	IFNULL(ROUND((get_task_user_num / user_num),4), 0) getTaskRatio,
	IFNULL(ROUND((do_task_user_num / user_num),4), 0) doTaskRatio
    FROM light_user_task_activity_stat_day
    WHERE stat_date BETWEEN #{startDate} AND #{endDate} 
    AND type = 7) B7,
  	(SELECT stat_date statDate,
	user_num userNum,
	get_task_user_num getTaskUserNum,
	do_task_user_num doTaskUserNum,
	IFNULL(ROUND((get_task_user_num / user_num),4), 0) getTaskRatio,
	IFNULL(ROUND((do_task_user_num / user_num),4), 0) doTaskRatio
    FROM light_user_task_activity_stat_day
    WHERE stat_date BETWEEN #{startDate} AND #{endDate} 
    AND type = 8) B8
    WHERE A.statDate = B1.statDate
    AND A.statDate = B2.statDate
    AND A.statDate = B3.statDate
    AND A.statDate = B4.statDate
    AND A.statDate = B5.statDate
    AND A.statDate = B6.statDate
    AND A.statDate = B7.statDate
    AND A.statDate = B8.statDate
    AND A.statDate = C.statDate
  </select>

  <select id="findLastRegistUserRecent" resultType="java.util.Map" parameterType="java.util.Date">
<!--
    SELECT
			d.*,
			t.allUserNum + d.registUserNum as allUserNum
		FROM(
			SELECT
				sum(td.regist_user_num) as registUserNum,
				sum(td.recommended_user_num) as recommendedUserNum,
				sum(td.dsp_user_num) as dspUserNum,
				sum(td.reta_user_num) as retaUserNum,
				sum(td.award_user_num) as awardUserNum,
				sum(td.other_user_num) as otherUserNum,
				sum(td.mobile_user_num) as mobileUserNum,
				sum(td.email_user_num) as emailUserNum,
				sum(td.nick_user_num) as nickUserNum,
				sum(td.qq_user_num) as qqUserNum,
				sum(td.weibo_user_num) as weiboUserNum
			FROM dc.user_regist_recent td
			where td.stat_date >= curDate()
		)d LEFT JOIN(
			SELECT
				all_user_num allUserNum
			FROM dc.user_active_stat
			WHERE stat_date = date_add(CURDATE(), INTERVAL - 1 DAY)
		)t ON 1=1-->
      SELECT (t.user_num + t.all_user_num) allUserNum
      FROM dw.heavy_user_num_stat_real t
      WHERE t.stat_date = CURDATE()
  </select>
  <select id="findUserInfoByMobile" resultType="java.util.Map" parameterType="java.util.Date">
    SELECT A.id FROM hyip.hyip_user A,   qianwang365.qw_cas_user B
    WHERE A.username = B.username
    AND B.mobile = #{mobile}
  </select>
</mapper>